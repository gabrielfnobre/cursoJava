    POLIMORFISMO


A definição de polimorfismo é quando possuímos duas ou mais variantes de um mesmo tipo de qualquer coisa. Por exemplo,
quando uma égua dá cria a 2 filhotes, onde um nasce com o pêlo de tom marrom, enquanto o outro nasce com o pêlo no tom
branco. Ambos são cavalos, porém um é diferente do outro, isso pode ser chamado de polimorfismo.

O polimorfismo é um dos pilares da programação orientada a objetos (POO) que permite que um objeto possa ser
referenciado de várias formas diferentes, assumindo comportamentos distintos dependendo do contexto em que é utilizado.

O polimorfismo permite que objetos de diferentes classes sejam tratados de maneira uniforme por meio de uma interface
comum. Isso significa que um objeto pode ser tratado como um objeto de sua classe específica ou como um objeto de uma
classe pai mais genérica.

O polimorfismo pode ser classificado em dois tipos: "Polimorfismo Dinâmico" e "Polimorfismo Estático".


    POLIMORFISMO DINÂMICO

O polimorfismo dinâmico também é conhecido como polimorfismo de tempo de execução ou override (sobrescrito). Pois ele
ocorre somente por herança e é indenficado em tempo de execução pelo java. É quando um objeto de uma subclasse herda
métodos da superclasse que poderão ser modificados (sobrescritos) a sua maneira.

Por exemplo, suponha que você tenha uma classe "Animal" como classe pai e as classes "Dog" e "Cat" como subclasses. Se
essas subclasses sobrescrevem um método chamado "fazerBarulho()", ao chamar o método "fazerBarulho()" em um objeto do
tipo Animal, o método adequado será determinado em tempo de execução com base no tipo real do objeto (se é um objeto
Dog ou Cat).

                                               _________________
                                              |                 |
                                              |      Animal     |
                                              |                 |
            _________________                 |  fazerBarulho() |                    _________________
           |                 |                |_________________|                   |                 |
           |       Dog       |                         |                            |       Cat       |
           |                 |                         |                            |                 |
           |    @override    | <<------------------------------------------------>> |    @override    |
           | fazerBarulho(){ |                                                      |  fazerBarulho() |
           |     "Auau!"     |                                                      |     "Miau!"     |
           | }               |                                                      | }               |
           |_________________|                                                      |_________________|


Note no exemplo acima que tanto Dog como Cat herdam o método fazerBarulho() de Animal, mas em cada classe o método foi
implementado a sua maneira. O que aconteceu aqui foi polimorfismo. Isso abre uma série de possibilidades e estilos de
implementação.

Por exemplo, podemos criar um objeto genérico sobre a classe Animal que possa receber qualquer tipo de objeto herdado
das classes filhas. Por exemplo:

    Animal cao = new Dog();
    cao = new Cat();

Note que no exemplo acima nós criamos um objeto genérico do tipo Animal(), por ser genérico, podemos atribuir sobre
ele qualquer objeto das suas classes filhas, e mudá-las se desejarmos. Isso nos abre o caminho para podermos atriuir
objetos como quisermos e usar seus métodos como quisermos;


    POLIMORFISMO ESTÁTICO

O polimorfismo estático, também conhecido como polimorfismo de tempo de compilação ou polimorfismo de sobrecarga
(overload). Ocorre quando geramos polimorfismo estáticamente escrevendo e modificando a maneira como os métodos poderão
se comportar dentro da própria classe. Onde, podemos gerar vários métodos com o mesmo nome, mas assinaturas diferentes,
onde dependendo da assinatura, poderemos assumir um outro comportamento.

Ele recebe esse nome de sobrecarga, por que um mesmo método pode ser recriado várias e várias vezes, ou seja, você está
sobrecarregando aquele método. Não por que está deixando o programa mais pesado, não é isso, é por que você está usando
aquele mesmo método várias e várias vezes mas de maneiras diferentes.

Por exemplo, suponha que você tenha uma classe chamada "Calculadora" que tenha dois métodos chamados "somar()": um que
aceita dois inteiros como argumentos e outro que aceita dois números de ponto flutuante. Durante a compilação, o
compilador decidirá qual método "somar()" será chamado com base nos tipos dos argumentos passados.

                                           ______________________________
                                          |                              |
                                          |          Calculadora         |
                                          |                              |
                                          |     somar(int a, int b){     |
                                          |       return a + b;          |
                                          |     }                        |
                                          |                              |
                                          |    somar(float a, float b){  |
                                          |       return a + b;          |
                                          |    }                         |
                                          |______________________________|


Resumindo, a diferença entre polimorfismo dinâmico e estático está no momento em que a resolução do método polimórfico
é feita. No polimorfismo dinâmico, a escolha do método é feita em tempo de execução, com base no tipo real do objeto.
No polimorfismo estático, a escolha do método é feita em tempo de compilação, com base no tipo declarado da variável e
nos argumentos fornecidos.
