
	RELACIONAMENTOS NO JPA
	
	
	Existem formas de representar relacionamentos no JPA que simulam relacionamentos nos nossos
	objetos mapeados dentro de nossas classes.
	
	Vamos considerar como são feitos esses relacionamentos em comparação com os relacionamentos
	feitos dentro de um banco relacional...
	
	
	UM PARA UM:
	
	Abaixo temos uma comparação entre como o relacionamento 1:1 é feito no banco de dados e co-
	mo é feito nas classes mapeadas. Note na classe mapeada que utilizamos a annotation @OneTo-
	One no atributo que simula uma relação com uma instância única da outra classe que deseja-
	mos nos relacionar.
	
	OBSERVAÇÃO: Representamos o relacionamento sendo feito de forma bidirecional somente para 
	mostrar que isso é possível, porém, essa não é a estratégia mais utilizada no mercado, pois 
	um relacionamentos bidirecional deve possuir garantias de que nenhum dado seja duplicado 
	entre os atributos das 2 classes.O que geralmente fazemos é escolher a classe que será mais
	utilizada no nosso modelo de negócios e atribuímos á ela a annotation OneToOne.
	
	 PK             PK      FK(unique)  |     Class Husband {            Class Wife {
	 ___________    ___________         |     	                         
	|___|___|___|  |___|___|___|        |     	@OneToOne|----------------|@OneToOne
	|___|___|___|  |___|___|___|        |     	Wife wife                  Husband husband
	|___|___|___|  |___|___|___|        |
      |______________________|          |     }                          }
      1                     1           |
      Husband           Wife            |
                                        |
                                        
    
    UM PARA MUITOS:
	
	Abaixo temos uma comparação de como é feito o relacionamento 1:N entre o banco de dados e 
	nossas classes mapeadas. Note que tanto no banco de dados como nas classes mapeadas no pa-
	radigma OO, esse relacionamento pode ser mapeado de forma unidirecional usando a ordem di-
	recional N:1, ou seja, a tabela ou classe principal para representar a relação sempre se-
	rá aquela que tiver muitas (N) ocorrências dela para (1) ocorrência na classe relacionada.
	
	Note que a nossa classe principal no Banco de Dados (aquela que demonstra o maior número 
	de informações) é a classe "Son", pois ela é quem possuí a ordem relacional "N", pois mui-
	tos filhos podem pertencer a "1" pai, fazendo com que a coluna "id_dad" nela possa ter 
	valores duplicados. Mas na tabela Dad não poderá haver duplicação do "id" de Dad. (Pode-
	mos até fazer um relacionamento bidirecional entre elas, onde Dad possuíria uma coluna FK
	para os valores de id de Son, aceitando valores duplicados para essa coluna (id_Son), mas
	geralmente isso não é feito em banco de dados)
	
	Veja abaixo como essa representação é feita entre banco de dados e o paradigma O.O. Para 
	deixar claro a annotation principal para representar essa relação é @ManyToOne que pode 
	ser usada para representar essa relação unidirecionalmente, essa annotation sempre é co-
	locada na classe que irá possuir a coluna FK de um relacionamento N:1, que no caso é a 
	classe Son.
	
	Note também que podemos representar essa relação bidirecionalmente no mundo O.O usando a
	annotation @OneToMany na classe Dad para o atributo que representa um objeto da classe
	Son.
	
	
	 PK      FK     PK                  |     Class Dad {                Class Son {
	 ___________    ___________         |     	                         
	|___|___|___|  |___|___|___|        |     	@OneToMany|---------------|@ManyToOne
	|___|___|___|  |___|___|___|        |     	List<Son> sons             Dad dad
	|___|___|___|  |___|___|___|        |
              |______|                  |     }                          }
               N     1                  |
    Son             Dad                 |
                                        |
                                                                   
    
    MUITOS PARA MUITOS:
    
	Abaixo temos uma comparação entre como o relacionamento N:M é feito no banco de dados e co-
	mo é feito nas classes mapeadas. Note que enquanto as entidades precisam de uma 3ª tabela 
	para simular um relacionamento N:M, no mundo OO essa representação pode ser feita direta-
	mente, sem a necessidade de uma 3ª classe representadora.
	
	Para isso, ambas as classes receberão a annotation @ManyToMany sobre um atributo List onde
	ambas irão conter as instâncias que são relacionadas com a instância atual de suas classes.
	
	Embora no mundo O.O não tenhamos uma 3 classe para representar a entidade que simula a re-
	lação N:M, a relação N:M no mundo O.O não deixa de ser bi-direcional, por isso precisamos
	explicitar para o JPA quem será o lado principal na representação do relacionamento, para
	isso serve o atributo "mappedBy" da annotation @ManyToMany. Com esse atributo mostramos a
	uma classe que o outro lado da relação já está mapeando o relacionamento, no exemplo abai-
	xo podemos ver que o lado "uncle" da relação está mapeando o relacionamento por através da
	tabela "uncle_nephew", por isso, na nossa classe "Nephew" mostramos que o relacionamento 
	já está sendo mapeado no atributo "nephews" da classa relacionadora "Uncle".
	
	
	 PK                     PK          |     Class Uncle {                Class Nephew {
	 ___________    ___________         |     	                         
	|___|___|___|  |___|___|___|        |     	@ManyToMany|----------------|@ManyToMany(mappedBy = "nephews")
	|___|___|___|  |___|___|___|        |     	List<Nephew> nephews         List<Uncle> uncles
	|___|___|___|  |___|___|___|        |
      |                      |          |     }                            }
      |       FK__FK_        |          |
      |______|___|___|_______|          |
      N      |___|___|       N          |
     Uncle   |___|___|  Nephew          |                  
										|
		    Uncle_Nephew				|
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	