

	JPA (JAVA PERSISTENCE API)
	* Veja como implementamos um JPA na pasta "example-jpa" dentro da pasta "CursoJava"
	
	
	O JPA, traduzido "API de Persistência do Java", de forma resumida é uma API interna
	do Java que fornece implementações simples de serem utilizadas para persistir dados
	em BDs Relacionais.
	
	O JPA utiliza o modelo de mapeamento ORM (Object Relational Mapping - Mapeamento de 
	Objeto Relacional) que nada mais é do que um padrão utilizado para transformar Obje-
	tos Java simples em elementos de um BD relacional e vice-versa.
	
	Ficou confuso? Veja o diagrama abaixo...
	
						  Objeto Java              Tabela MySQL
						 ____________            ________________
						|            |          |                |
						|   CLASS    |--------->|     ENTITY     |
						|____________|          |________________|
						|            |          |                | 
						| ATTRIBUTES |--------->|     COLUMNS    |
						|____________|          |________________|
						|            |          |                |
						|  METHODS   |--------->| SQL COMMANDERS |
						|____________|          |________________|
	
	
	O que o JPA faz basicamente é transformar um objeto Java em um registro da nossa ta-
	bela no BD, usando o padrão de Mapeamento ORM, o JPA transforma classes em entida-
	des, Atributos em Colunas da nossa tabela e Métodos em comandos SQL.
	
	E isso tudo de uma maneira simples e intuítiva, pois o JPA utiliza frameworks incor-
	porados a ele que já trazem os métodos DML, DDL e outros prontos na sua implemen-
	tação, o desenvolvedor não precisa criar nenhum médoto CRUD, ele simplesmente tem
	que mostrar ao Java que uma determinada classe, atributo ou método faz referência 
	a um determinado elemento ou comando do SQL.
	
	O framework mais usado para implementação ORM do JPA é o Hibernate. O Hibernate não
	é nativo do Java, ele precisa ser baixado para ser utilizado. Por através dele, é
	possível que nós usemos @annotations para identificar elementos do nosso código a
	elementos do BD. Veja alguns exemplos:
	
		@Entity
		public class Product {
			
			@Id
			private Long id;
			
		}
		
		O exemplo acima, mostra que a classe "Product" faz referência a tabela "Product"
		do nosso BD, e o atributo "id" faz referência a PK do nosso BD. Toda essa in-
		formação, que precisaria ser passada de forma complexa, é passada de maneira 
		rápida e natural por através das @annotations que o Hibernate usa.
		
	Mas como o Hibernate sabe para qual BD ele deverá referenciar? Essa informação é pas-
	sada para ele por através de código XML, que faz a configuração entre a nossa apli-
	cação e o BD. Tudo isso é feita de forma muito encapsulada no mais alto nível, o que
	torna a criação e manutenção de código rápida e eficaz.
	 ____________________________________________________________________________________
	|                                                                                    |
	| OBSERVAÇÃO: Por debaixo dos panos, o Hibernate utiliza JDBC, portanto essa biblio- |
	| teca também precisa ser baixada junto ao Hibernate.                                |
	|____________________________________________________________________________________|
	
	
	IMPORTÂNCIA DO DAO NO JPA
	
	No JPA o conceito de DAO é muito importante (se não se lembrar o que é DAO veja a 
	pasta de designer patterns sobre DAO) para fazer a separação entre código do negócio
	e código de acesso ao BD.
	
	Visto que a implementação do JPA pode ser feita em qualquer lugar do nosso código é
	importante que o desenvolvedor se atente a manter sua pastinha de DAO bem separada do
	model da aplicação. Isso ajudará os desenvolvedores a construir um código mais manu-
	tenível, fácil de adaptar e menos confuso.
	
	
	PADRÃO DE PROJETO DATA MAPPER
	
	O Hibernate faz o uso extensivo do padrão de projeto Data Mapper (Mapeador de Dados).
	o Data Mapper é um padrão de projeto que estipula técnicas para identificar objetos
	do nosso código e representá-los em elementos dos BDs, ou vice-versa.
	
	Para isso o Data Mapper utiliza @annotations, XML, JSON ou outros tipos de meta-da-
	dos para fazer essa identificação e atribuição de comandos. Diferente de outros pa-
	drões de Mapeamento de dados, como por exemplo o ACTIVE RECORD, o Data Mapper não 
	utiliza herança para fazer com que classes e objetos gerados delas representem re-
	gistros no BD, em vez disso ela usa mapeamento por através de @annotations, XML e ou-
	tros.
	
	O diagrama abaixo mostra bem isso...
	
			    Objeto         							    Tabela "X"
			 ____________      							 ________________
			|            |     							|                |
			|  @entity   |          					|                |
			|   CLASS    |            _____				|     ENTITY     |
			|____________|           |     |			|________________|
			|            |---------->| XML |----------->|                |
			| @column    |           |_____|			|                |
			| ATTRIBUTES |          					|     COLUMNS    |
			|____________|          					|________________|
			|            |         						|                |
			| "select..."|     							|                |
			|  METHODS   |    							| SQL COMMANDERS |
			|____________|     							|________________|
	
	
	
	A IMPORTÂNCIA DA IMPLEMENTAÇÃO DO ORM
	
	O padrão ORM - Object Relational Mapper (Mapeador de Objeto Relacional) - é respon-
	sável por implementar o estilo de mapeamento que deveremos utilizar para fazer nos-
	sas integrações ao banco de dados.
	
	É ele que diz ao framework integrador, no nosso caso o mais utilizado é o Hibernate,
	no que o framework deverá se concentrar para fazer a integração entre classes e enti-
	dades, atributos e colunas, métodos e comandos SQL.
	
	Como o ORM faz isso?
	Por através das @annotations.
	
	Existe uma série de @annotations que são reconhecidas pelo framework do Hibernate,
	bem como convenções que são adotadas para que a integração ao BD seja feita. Esse es-
	tilo de mapear os objetos é justamente o padrão ORM.
	
	Veja alguns exemplos de @annotations utilizadas...
	
		@Entity: Esta annotation é usada para marcar uma classe como uma entidade persis-
				tente. Por convencão, se o nome da classe for exatamente o mesmo nome da
				entidade no BD, o Hibernate já identifica a que tabela se refere uma de-
				terminada classe.
				
		@Table: Esta annotation é usada para especificar o nome da tabela no banco de da-
				dos que corresponde à entidade. Ela é usada em casos em que o nome da 
				classe e o nome da tabela não são exatamente iguais. Geralmente usamos 
				assim:
				
					@Entity
					@Table(name = "products")
					public class Product {
						...
					}
					
					Note que, pelo fato do nome da entidade estar no plural e a classe no
					singular, foi necessário usar a @annotation "@Table" para mostrar ao
					Hibernate a que tabela uma classe deve ser mapeada.
					
		@Id: Esta annotation é usada para marcar o atributo que atua como a chave primária 
				da entidade.
				
		@GeneratedValue: Esta annotation é usada em conjunto com @Id para especificar a es-
				tratégia de geração de valores para a chave primária. Quando usamos o valor 
				"GenerationType.IDENTITY" o id gera auto-incrementos sequênciais para
				todos os itens de uma determinada coluna. Veja o exemplo abaixo:
				
				 	@Id
					@GeneratedValue(strategy = GenerationType.IDENTITY)
					private Long id;
					
		@Column: Esta annotation é usada para mapear um atributo da classe para uma coluna 
				específica no banco de dados. Quando um atributo possuí exatamente o mesmo
				nome que uma coluna do BD, por convenção podemos utilizar apenas a annota-
				tion "@Column", mas se o atributo tiver um nome diferente, deveremos passar
				para o @Column o nome da coluna a qual desejamos mapear aquele determinado 
				atributo. Veja o exemplo abaixo:
				
					@Column(name = "product_name")
					private String productName;
					
		@ManyToOne e @OneToMany: Estas annotations são usadas para mapear relacionamentos 
				entre entidades. Por exemplo, quando uma entidade tem uma relação muitos-
				para-muitos ou um-para-um com outra entidade.
				
		@JoinColumn: Esta annotation é usada para especificar a coluna na tabela do banco de 
				dados que mantém a chave estrangeira de outra coluna em outra tabela.
				
	Esses são apenas alguns exemplos, porém note que o ORM facilita a vida do desenvolvedor,
	com apenas algumas annotations, conseguimos mapear os nossos objetos de forma simplifi-
	cada, tornando o código facilmente manutenível e fácil de manter.
				
			
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	